0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.11
3 info using node@v0.10.33
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/tomlagie/Sites/projects/socket-signaler-client',
8 silly cache add   type: 'directory' }
9 verbose tar pack [ '/Users/tomlagie/.npm/socket-signaler-client/0.2.2/package.tgz',
9 verbose tar pack   '/Users/tomlagie/Sites/projects/socket-signaler-client' ]
10 verbose tarball /Users/tomlagie/.npm/socket-signaler-client/0.2.2/package.tgz
11 verbose folder /Users/tomlagie/Sites/projects/socket-signaler-client
12 info prepublish socket-signaler-client@0.2.2
13 verbose addLocalTarball adding from inside cache /Users/tomlagie/.npm/socket-signaler-client/0.2.2/package.tgz
14 silly cache afterAdd socket-signaler-client@0.2.2
15 verbose afterAdd /Users/tomlagie/.npm/socket-signaler-client/0.2.2/package/package.json not in flight; writing
16 verbose afterAdd /Users/tomlagie/.npm/socket-signaler-client/0.2.2/package/package.json written
17 silly publish { name: 'socket-signaler-client',
17 silly publish   version: '0.2.2',
17 silly publish   description: 'Client for SocketIO WebRTC streaming webcam chatrooms',
17 silly publish   main: 'dist/signaler-client.js',
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'https://github.com/mcmouse/socketio-signaler.git' },
17 silly publish   keywords: [ 'socket.io', 'webrtc', 'webcam', 'streaming', 'peerconnection' ],
17 silly publish   author: { name: 'Tom Lagier' },
17 silly publish   license: 'MIT',
17 silly publish   bugs: { url: 'https://github.com/mcmouse/socketio-signaler/issues' },
17 silly publish   homepage: 'https://github.com/mcmouse/socketio-signaler',
17 silly publish   dependencies:
17 silly publish    { 'socket.io-client': '^1.3.3',
17 silly publish      'wolfy87-eventemitter': '^4.2.11' },
17 silly publish   devDependencies:
17 silly publish    { browserify: '^8.1.3',
17 silly publish      gulp: '^3.8.11',
17 silly publish      'gulp-rename': '^1.2.0',
17 silly publish      'gulp-uglify': '^1.1.0',
17 silly publish      uglifyify: '^3.0.1',
17 silly publish      'vinyl-source-stream': '^1.0.0' },
17 silly publish   readme: '#Socket.IO Signaler Client\n\nThis package is intended to be used as the client component of the [Socket.IO Signaler](https://github.com/mcmouse/socketio-signaler) package. It was written in order to interface with a websockets based signaling server and wrap the WebRTC negotiation and GetUserMedia process, offering up a sensible event API.\n\nAn important difference between this package and similar WebRTC solutions is that it\'s built on an exposed [Socket.IO](http://socket.io) socket. This allows you to use the same connection for both chat and webcams in instances where you would like to host your own signaling server.\n\nI will mention that this package was written as an exploration into WebRTC by me. I make no promises as to lifespan or maintenance. I welcome any comments or critiques of the coding style. \n\nFor robust, actively-maintained WebRTC helper libraries, I recommend [peer.js](http://peerjs.com/), [rtc.io](https://rtc.io/), and [TemaSys SkyLink](https://temasys.github.io/).\n\nThe Signaler Client is only compatible with recent versions of browsers that have implemented WebRTC - Chrome, Firefox, and Opera at time of writing.\n\n##Getting Started\n\nThe Socket.IO Signaler Client is compatible with vanilla JavaScript and Bower as well as AMD-style ([RequireJS](http://requirejs.org/)) and CommonJS-style ([Browserify](http://browserify.org/)) module systems.\n\nIt is dependent on the [Socket.IO](http://socket.io/) client library and the excellent [EventEmitter](https://github.com/Wolfy87/EventEmitter) prototype. Both are packaged with the CommonJS include style and are loaded from CDN in the AMD-style include.\n\nYou can grab the minified file from the `dist` folder, or install the whole package with `Bower` or `NPM`. You should only use the packaged file if you are using Browserify or another CommonJS module loader:\n\n###Installation\n\n  //Install package with Bower\n  bower install --save socket-signaler-client\n\n  //Install package with NPM\n  npm install --save socket-signaler-client\n\n####Pure JavaScript\n  //Include dependencies\n  <script src="https://cdn.socket.io/socket.io-1.3.3.js"></script>\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/EventEmitter/4.2.11/EventEmitter.min.js"></script>\n\n  //Include client\n  <script src="libs/signaler-client.min.js"></script>\n\n####CommonJS (Browserify)\n  //Include constructor\n  //Dependencies are packaged\n  var PeerConnectionClient = require(\'socket-signaler-client\');\n\n####AMD (RequireJS)\n  //Add path to module to your Require config\n  //Dependencies are loaded from CDN\n  require.config({\n    ...\n    paths: {\n      ...\n      PeerConnectionClient: \'libs/signaler-client\',\n    },\n  });\n\n  //Pass module into any modules where it is used\n  require([\'PeerConnectionClient\'], function (PeerConnectionClient) {\n    //Constructor available here\n  }\n\n###Intitialization\n  var pc = new PeerConnectionClient(options);\n  //Can use pc to bind to connection lifecycle events here\n\n###Simple webcam call\n  pc.on(\'localStreamAdded\', function (stream) {\n    var local = $(\'#local\')[0];\n    local.src = URL.createObjectURL(stream);\n  });\n\n  pc.on(\'remoteStreamAdded\', function (stream, peer) {\n    var element = videoTemplate.clone();\n    element.attr({\n      \'class\': peer,\n      \'src\': URL.createObjectURL(stream)\n    });\n    $(\'#remotes\').append(element);\n  });\n\n  pc.on(\'localStreamRemoved\', function () {\n    var local = $(\'#local\')[0];\n    local.src = \'\';\n  });\n\n  pc.on(\'remoteStreamRemoved\', function (peer) {\n    var remote = $(\'.\' + peer);\n    remote.remove();\n  });\n\n  $(\'#show\').on(\'click\', function () {\n    spc.addLocalStream();\n  });\n\n  $(\'#hide\').on(\'click\', function () {\n    spc.removeLocalStream();\n  });\n\n##Options\n\nThese options can be passed in to the PeerConnectionClient constructor\n\n`server` - Where the signaling WebSockets server is located.\nDefault: Current host root. So if you run the PeerConnectionClient from `http://localhost:3000/`, the PeerConnectionClient will try to connect to the WS server there.\n\n`room` - The room that will be the context for connecting to peers. Your client will connect to all other clients in this room.\nDefault: `default`\n\n`debug` - Whether to console log negotiation events. Acceptable values are `false`, `true`, or `"verbose"`, which will log full ICE connections.\nDefault: `false`\n\n##API\n\n###Events\n\nThe PeerConnectionClient is an EventEmitter, meaning that you can use `on()`, `emit()`, and `trigger()` to listen to and fire events. There are several default events used to listen to the negotiation cycle, as well as many signaling events used to communicate with the signaling server.\n\n`.on(\'localStreamAdded\', function(stream){})`\nTriggered when the local user has successfully added a stream to their local PeerConnections. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured. This object can be added to `<video>` elements.\n\n`.on(\'remoteStreamAdded\', function(stream, peer){})`\nTriggered when a peer has successfully added a stream to their PeerConnection. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured and the peer\'s unique ID.\n\n`.on(\'localStreamRemoved\', function(){})`\nTriggered when the local stream has been removed.\n\n`.on(\'remoteStreamRemoved\', function(peer){})`\nTriggered when a remote stream has been removed. Called with the peer\'s unique ID.\n\n`.on(\'peerConnected\', function(peer){})`\nTriggered when a peer has established and negotiated a PeerConnection. Can be used to add DataChannels, or just keep a list of users. Called with the peer\'s unique ID.\n\n`.on(\'peerDisconnected\', function(peer){})`\nTriggered when a peer has disconnected. Can be used to keep track of which users are currently conected. Called with the peer\'s unique ID.\n\n... Coming soon: DataChannels!\n\n###Methods\n\nThe PeerConnectionClient exposes many methods for interacting with peers connected to the WebSockets room.\n\n`addLocalStream(options)`\nCalls [GetUserMedia](https://developer.mozilla.org/en-US/docs/NavigatorUserMedia.getUserMedia) to capture the browser\'s webcam and microphone. Passes through all standard GetUserMedia options, so can be used to capture just audio or video if necessary. Will trigger a user prompt asking for permission to access webcam and microphone.\n\n`removeLocalStream()`\nRemoves the local stream from all PeerConnections and revoke microphone and video access.\n\n`disconnectConnection(id)`\nDisconnects a peer with the given ID, closing and removing the PeerConnection. If the connection had a MediaStream, it will also close and remove the stream.\n\n###License\n\nCopyright (c) 2015 Tom Lagier <tom@thomaslagier.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '3e013cceba0e080c4bc7807ea14ce0e2225df52d',
17 silly publish   _id: 'socket-signaler-client@0.2.2',
17 silly publish   _shasum: '5b028b6eeaaece53095839f75dc26e7be335bdff',
17 silly publish   _from: '.' }
18 silly mapToRegistry name socket-signaler-client
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/socket-signaler-client
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/tomlagie/.npm/socket-signaler-client/0.2.2/package.tgz
24 verbose request uri https://registry.npmjs.org/socket-signaler-client
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 17:42:55
27 verbose request id 9295ceaddb1797a3
28 http request PUT https://registry.npmjs.org/socket-signaler-client
29 http 403 https://registry.npmjs.org/socket-signaler-client
30 verbose headers { date: 'Fri, 13 Feb 2015 01:42:56 GMT',
30 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '11752',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   'x-served-by': 'cache-lax1422-LAX',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1423791776.154933,VS0,VE241',
30 verbose headers   'keep-alive': 'timeout=10, max=50',
30 verbose headers   connection: 'Keep-Alive' }
31 verbose request invalidating /Users/tomlagie/.npm/registry.npmjs.org/socket-signaler-client on PUT
32 error publish Failed PUT 403
33 verbose stack Error: forbidden cannot modify pre-existing version: 0.2.2
33 verbose stack old={"name":"socket-signaler-client","version":"0.2.2","description":"Client for SocketIO WebRTC streaming webcam chatrooms","main":"dist/signaler-client.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/mcmouse/socketio-signaler.git"},"keywords":["socket.io","webrtc","webcam","streaming","peerconnection"],"author":{"name":"Tom Lagier"},"license":"MIT","bugs":{"url":"https://github.com/mcmouse/socketio-signaler/issues"},"homepage":"https://github.com/mcmouse/socketio-signaler","dependencies":{"socket.io-client":"^1.3.3","wolfy87-eventemitter":"^4.2.11"},"devDependencies":{"browserify":"^8.1.3","gulp":"^3.8.11","gulp-rename":"^1.2.0","gulp-uglify":"^1.1.0","uglifyify":"^3.0.1","vinyl-source-stream":"^1.0.0"},"gitHead":"19f329d4097d7651bae348d5a8352a103a96a8a7","_id":"socket-signaler-client@0.2.2","_shasum":"088681af07f47b7bd0f440b55ab232e272b9a1b0","_from":".","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"tomlagier","email":"tom@thomaslagier.me"},"maintainers":[{"name":"tomlagier","email":"tom@thomaslagier.me"}],"dist":{"shasum":"088681af07f47b7bd0f440b55ab232e272b9a1b0","tarball":"http://registry.npmjs.org/socket-signaler-client/-/socket-signaler-client-0.2.2.tgz"}}
33 verbose stack new={"name":"socket-signaler-client","version":"0.2.2","description":"Client for SocketIO WebRTC streaming webcam chatrooms","main":"dist/signaler-client.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/mcmouse/socketio-signaler.git"},"keywords":["socket.io","webrtc","webcam","streaming","peerconnection"],"author":{"name":"Tom Lagier"},"license":"MIT","bugs":{"url":"https://github.com/mcmouse/socketio-signaler/issues"},"homepage":"https://github.com/mcmouse/socketio-signaler","dependencies":{"socket.io-client":"^1.3.3","wolfy87-eventemitter":"^4.2.11"},"devDependencies":{"browserify":"^8.1.3","gulp":"^3.8.11","gulp-rename":"^1.2.0","gulp-uglify":"^1.1.0","uglifyify":"^3.0.1","vinyl-source-stream":"^1.0.0"},"readme":"#Socket.IO Signaler Client\u000a\u000aThis package is intended to be used as the client component of the [Socket.IO Signaler](https://github.com/mcmouse/socketio-signaler) package. It was written in order to interface with a websockets based signaling server and wrap the WebRTC negotiation and GetUserMedia process, offering up a sensible event API.\u000a\u000aAn important difference between this package and similar WebRTC solutions is that it's built on an exposed [Socket.IO](http://socket.io) socket. This allows you to use the same connection for both chat and webcams in instances where you would like to host your own signaling server.\u000a\u000aI will mention that this package was written as an exploration into WebRTC by me. I make no promises as to lifespan or maintenance. I welcome any comments or critiques of the coding style. \u000a\u000aFor robust, actively-maintained WebRTC helper libraries, I recommend [peer.js](http://peerjs.com/), [rtc.io](https://rtc.io/), and [TemaSys SkyLink](https://temasys.github.io/).\u000a\u000aThe Signaler Client is only compatible with recent versions of browsers that have implemented WebRTC - Chrome, Firefox, and Opera at time of writing.\u000a\u000a##Getting Started\u000a\u000aThe Socket.IO Signaler Client is compatible with vanilla JavaScript and Bower as well as AMD-style ([RequireJS](http://requirejs.org/)) and CommonJS-style ([Browserify](http://browserify.org/)) module systems.\u000a\u000aIt is dependent on the [Socket.IO](http://socket.io/) client library and the excellent [EventEmitter](https://github.com/Wolfy87/EventEmitter) prototype. Both are packaged with the CommonJS include style and are loaded from CDN in the AMD-style include.\u000a\u000aYou can grab the minified file from the `dist` folder, or install the whole package with `Bower` or `NPM`. You should only use the packaged file if you are using Browserify or another CommonJS module loader:\u000a\u000a###Installation\u000a\u000a  //Install package with Bower\u000a  bower install --save socket-signaler-client\u000a\u000a  //Install package with NPM\u000a  npm install --save socket-signaler-client\u000a\u000a####Pure JavaScript\u000a  //Include dependencies\u000a  <script src=\"https://cdn.socket.io/socket.io-1.3.3.js\"></script>\u000a  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/EventEmitter/4.2.11/EventEmitter.min.js\"></script>\u000a\u000a  //Include client\u000a  <script src=\"libs/signaler-client.min.js\"></script>\u000a\u000a####CommonJS (Browserify)\u000a  //Include constructor\u000a  //Dependencies are packaged\u000a  var PeerConnectionClient = require('socket-signaler-client');\u000a\u000a####AMD (RequireJS)\u000a  //Add path to module to your Require config\u000a  //Dependencies are loaded from CDN\u000a  require.config({\u000a    ...\u000a    paths: {\u000a      ...\u000a      PeerConnectionClient: 'libs/signaler-client',\u000a    },\u000a  });\u000a\u000a  //Pass module into any modules where it is used\u000a  require(['PeerConnectionClient'], function (PeerConnectionClient) {\u000a    //Constructor available here\u000a  }\u000a\u000a###Intitialization\u000a  var pc = new PeerConnectionClient(options);\u000a  //Can use pc to bind to connection lifecycle events here\u000a\u000a###Simple webcam call\u000a  pc.on('localStreamAdded', function (stream) {\u000a    var local = $('#local')[0];\u000a    local.src = URL.createObjectURL(stream);\u000a  });\u000a\u000a  pc.on('remoteStreamAdded', function (stream, peer) {\u000a    var element = videoTemplate.clone();\u000a    element.attr({\u000a      'class': peer,\u000a      'src': URL.createObjectURL(stream)\u000a    });\u000a    $('#remotes').append(element);\u000a  });\u000a\u000a  pc.on('localStreamRemoved', function () {\u000a    var local = $('#local')[0];\u000a    local.src = '';\u000a  });\u000a\u000a  pc.on('remoteStreamRemoved', function (peer) {\u000a    var remote = $('.' + peer);\u000a    remote.remove();\u000a  });\u000a\u000a  $('#show').on('click', function () {\u000a    spc.addLocalStream();\u000a  });\u000a\u000a  $('#hide').on('click', function () {\u000a    spc.removeLocalStream();\u000a  });\u000a\u000a##Options\u000a\u000aThese options can be passed in to the PeerConnectionClient constructor\u000a\u000a`server` - Where the signaling WebSockets server is located.\u000aDefault: Current host root. So if you run the PeerConnectionClient from `http://localhost:3000/`, the PeerConnectionClient will try to connect to the WS server there.\u000a\u000a`room` - The room that will be the context for connecting to peers. Your client will connect to all other clients in this room.\u000aDefault: `default`\u000a\u000a`debug` - Whether to console log negotiation events. Acceptable values are `false`, `true`, or `\"verbose\"`, which will log full ICE connections.\u000aDefault: `false`\u000a\u000a##API\u000a\u000a###Events\u000a\u000aThe PeerConnectionClient is an EventEmitter, meaning that you can use `on()`, `emit()`, and `trigger()` to listen to and fire events. There are several default events used to listen to the negotiation cycle, as well as many signaling events used to communicate with the signaling server.\u000a\u000a`.on('localStreamAdded', function(stream){})`\u000aTriggered when the local user has successfully added a stream to their local PeerConnections. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured. This object can be added to `<video>` elements.\u000a\u000a`.on('remoteStreamAdded', function(stream, peer){})`\u000aTriggered when a peer has successfully added a stream to their PeerConnection. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured and the peer's unique ID.\u000a\u000a`.on('localStreamRemoved', function(){})`\u000aTriggered when the local stream has been removed.\u000a\u000a`.on('remoteStreamRemoved', function(peer){})`\u000aTriggered when a remote stream has been removed. Called with the peer's unique ID.\u000a\u000a`.on('peerConnected', function(peer){})`\u000aTriggered when a peer has established and negotiated a PeerConnection. Can be used to add DataChannels, or just keep a list of users. Called with the peer's unique ID.\u000a\u000a`.on('peerDisconnected', function(peer){})`\u000aTriggered when a peer has disconnected. Can be used to keep track of which users are currently conected. Called with the peer's unique ID.\u000a\u000a... Coming soon: DataChannels!\u000a\u000a###Methods\u000a\u000aThe PeerConnectionClient exposes many methods for interacting with peers connected to the WebSockets room.\u000a\u000a`addLocalStream(options)`\u000aCalls [GetUserMedia](https://developer.mozilla.org/en-US/docs/NavigatorUserMedia.getUserMedia) to capture the browser's webcam and microphone. Passes through all standard GetUserMedia options, so can be used to capture just audio or video if necessary. Will trigger a user prompt asking for permission to access webcam and microphone.\u000a\u000a`removeLocalStream()`\u000aRemoves the local stream from all PeerConnections and revoke microphone and video access.\u000a\u000a`disconnectConnection(id)`\u000aDisconnects a peer with the given ID, closing and removing the PeerConnection. If the connection had a MediaStream, it will also close and remove the stream.\u000a\u000a###License\u000a\u000aCopyright (c) 2015 Tom Lagier <tom@thomaslagier.me>\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in\u000aall copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\u000aIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\u000aFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\u000aAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\u000aLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\u000aOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\u000aTHE SOFTWARE.","readmeFilename":"README.md","gitHead":"3e013cceba0e080c4bc7807ea14ce0e2225df52d","_id":"socket-signaler-client@0.2.2","_shasum":"5b028b6eeaaece53095839f75dc26e7be335bdff","_from":".","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"tomlagier","email":"tom@thomaslagier.me"},"maintainers":[{"name":"tomlagier","email":"tom@thomaslagier.me"}],"dist":{"shasum":"5b028b6eeaaece53095839f75dc26e7be335bdff","tarball":"http://registry.npmjs.org/socket-signaler-client/-/socket-signaler-client-0.2.2.tgz"}}: socket-signaler-client
33 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:242:14)
33 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
33 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:373:22)
33 verbose stack     at Request.emit (events.js:98:17)
33 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:1318:14)
33 verbose stack     at Request.emit (events.js:117:20)
33 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:1266:12)
33 verbose stack     at IncomingMessage.emit (events.js:117:20)
33 verbose stack     at _stream_readable.js:943:16
33 verbose stack     at process._tickCallback (node.js:419:13)
34 verbose statusCode 403
35 verbose pkgid socket-signaler-client
36 verbose cwd /Users/tomlagie/Sites/projects/socket-signaler-client
37 error Darwin 13.4.0
38 error argv "node" "/usr/local/bin/npm" "publish"
39 error node v0.10.33
40 error npm  v2.1.11
41 error code E403
42 error forbidden cannot modify pre-existing version: 0.2.2
42 error old={"name":"socket-signaler-client","version":"0.2.2","description":"Client for SocketIO WebRTC streaming webcam chatrooms","main":"dist/signaler-client.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/mcmouse/socketio-signaler.git"},"keywords":["socket.io","webrtc","webcam","streaming","peerconnection"],"author":{"name":"Tom Lagier"},"license":"MIT","bugs":{"url":"https://github.com/mcmouse/socketio-signaler/issues"},"homepage":"https://github.com/mcmouse/socketio-signaler","dependencies":{"socket.io-client":"^1.3.3","wolfy87-eventemitter":"^4.2.11"},"devDependencies":{"browserify":"^8.1.3","gulp":"^3.8.11","gulp-rename":"^1.2.0","gulp-uglify":"^1.1.0","uglifyify":"^3.0.1","vinyl-source-stream":"^1.0.0"},"gitHead":"19f329d4097d7651bae348d5a8352a103a96a8a7","_id":"socket-signaler-client@0.2.2","_shasum":"088681af07f47b7bd0f440b55ab232e272b9a1b0","_from":".","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"tomlagier","email":"tom@thomaslagier.me"},"maintainers":[{"name":"tomlagier","email":"tom@thomaslagier.me"}],"dist":{"shasum":"088681af07f47b7bd0f440b55ab232e272b9a1b0","tarball":"http://registry.npmjs.org/socket-signaler-client/-/socket-signaler-client-0.2.2.tgz"}}
42 error new={"name":"socket-signaler-client","version":"0.2.2","description":"Client for SocketIO WebRTC streaming webcam chatrooms","main":"dist/signaler-client.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/mcmouse/socketio-signaler.git"},"keywords":["socket.io","webrtc","webcam","streaming","peerconnection"],"author":{"name":"Tom Lagier"},"license":"MIT","bugs":{"url":"https://github.com/mcmouse/socketio-signaler/issues"},"homepage":"https://github.com/mcmouse/socketio-signaler","dependencies":{"socket.io-client":"^1.3.3","wolfy87-eventemitter":"^4.2.11"},"devDependencies":{"browserify":"^8.1.3","gulp":"^3.8.11","gulp-rename":"^1.2.0","gulp-uglify":"^1.1.0","uglifyify":"^3.0.1","vinyl-source-stream":"^1.0.0"},"readme":"#Socket.IO Signaler Client\u000a\u000aThis package is intended to be used as the client component of the [Socket.IO Signaler](https://github.com/mcmouse/socketio-signaler) package. It was written in order to interface with a websockets based signaling server and wrap the WebRTC negotiation and GetUserMedia process, offering up a sensible event API.\u000a\u000aAn important difference between this package and similar WebRTC solutions is that it's built on an exposed [Socket.IO](http://socket.io) socket. This allows you to use the same connection for both chat and webcams in instances where you would like to host your own signaling server.\u000a\u000aI will mention that this package was written as an exploration into WebRTC by me. I make no promises as to lifespan or maintenance. I welcome any comments or critiques of the coding style. \u000a\u000aFor robust, actively-maintained WebRTC helper libraries, I recommend [peer.js](http://peerjs.com/), [rtc.io](https://rtc.io/), and [TemaSys SkyLink](https://temasys.github.io/).\u000a\u000aThe Signaler Client is only compatible with recent versions of browsers that have implemented WebRTC - Chrome, Firefox, and Opera at time of writing.\u000a\u000a##Getting Started\u000a\u000aThe Socket.IO Signaler Client is compatible with vanilla JavaScript and Bower as well as AMD-style ([RequireJS](http://requirejs.org/)) and CommonJS-style ([Browserify](http://browserify.org/)) module systems.\u000a\u000aIt is dependent on the [Socket.IO](http://socket.io/) client library and the excellent [EventEmitter](https://github.com/Wolfy87/EventEmitter) prototype. Both are packaged with the CommonJS include style and are loaded from CDN in the AMD-style include.\u000a\u000aYou can grab the minified file from the `dist` folder, or install the whole package with `Bower` or `NPM`. You should only use the packaged file if you are using Browserify or another CommonJS module loader:\u000a\u000a###Installation\u000a\u000a  //Install package with Bower\u000a  bower install --save socket-signaler-client\u000a\u000a  //Install package with NPM\u000a  npm install --save socket-signaler-client\u000a\u000a####Pure JavaScript\u000a  //Include dependencies\u000a  <script src=\"https://cdn.socket.io/socket.io-1.3.3.js\"></script>\u000a  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/EventEmitter/4.2.11/EventEmitter.min.js\"></script>\u000a\u000a  //Include client\u000a  <script src=\"libs/signaler-client.min.js\"></script>\u000a\u000a####CommonJS (Browserify)\u000a  //Include constructor\u000a  //Dependencies are packaged\u000a  var PeerConnectionClient = require('socket-signaler-client');\u000a\u000a####AMD (RequireJS)\u000a  //Add path to module to your Require config\u000a  //Dependencies are loaded from CDN\u000a  require.config({\u000a    ...\u000a    paths: {\u000a      ...\u000a      PeerConnectionClient: 'libs/signaler-client',\u000a    },\u000a  });\u000a\u000a  //Pass module into any modules where it is used\u000a  require(['PeerConnectionClient'], function (PeerConnectionClient) {\u000a    //Constructor available here\u000a  }\u000a\u000a###Intitialization\u000a  var pc = new PeerConnectionClient(options);\u000a  //Can use pc to bind to connection lifecycle events here\u000a\u000a###Simple webcam call\u000a  pc.on('localStreamAdded', function (stream) {\u000a    var local = $('#local')[0];\u000a    local.src = URL.createObjectURL(stream);\u000a  });\u000a\u000a  pc.on('remoteStreamAdded', function (stream, peer) {\u000a    var element = videoTemplate.clone();\u000a    element.attr({\u000a      'class': peer,\u000a      'src': URL.createObjectURL(stream)\u000a    });\u000a    $('#remotes').append(element);\u000a  });\u000a\u000a  pc.on('localStreamRemoved', function () {\u000a    var local = $('#local')[0];\u000a    local.src = '';\u000a  });\u000a\u000a  pc.on('remoteStreamRemoved', function (peer) {\u000a    var remote = $('.' + peer);\u000a    remote.remove();\u000a  });\u000a\u000a  $('#show').on('click', function () {\u000a    spc.addLocalStream();\u000a  });\u000a\u000a  $('#hide').on('click', function () {\u000a    spc.removeLocalStream();\u000a  });\u000a\u000a##Options\u000a\u000aThese options can be passed in to the PeerConnectionClient constructor\u000a\u000a`server` - Where the signaling WebSockets server is located.\u000aDefault: Current host root. So if you run the PeerConnectionClient from `http://localhost:3000/`, the PeerConnectionClient will try to connect to the WS server there.\u000a\u000a`room` - The room that will be the context for connecting to peers. Your client will connect to all other clients in this room.\u000aDefault: `default`\u000a\u000a`debug` - Whether to console log negotiation events. Acceptable values are `false`, `true`, or `\"verbose\"`, which will log full ICE connections.\u000aDefault: `false`\u000a\u000a##API\u000a\u000a###Events\u000a\u000aThe PeerConnectionClient is an EventEmitter, meaning that you can use `on()`, `emit()`, and `trigger()` to listen to and fire events. There are several default events used to listen to the negotiation cycle, as well as many signaling events used to communicate with the signaling server.\u000a\u000a`.on('localStreamAdded', function(stream){})`\u000aTriggered when the local user has successfully added a stream to their local PeerConnections. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured. This object can be added to `<video>` elements.\u000a\u000a`.on('remoteStreamAdded', function(stream, peer){})`\u000aTriggered when a peer has successfully added a stream to their PeerConnection. Called with the [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) object that was captured and the peer's unique ID.\u000a\u000a`.on('localStreamRemoved', function(){})`\u000aTriggered when the local stream has been removed.\u000a\u000a`.on('remoteStreamRemoved', function(peer){})`\u000aTriggered when a remote stream has been removed. Called with the peer's unique ID.\u000a\u000a`.on('peerConnected', function(peer){})`\u000aTriggered when a peer has established and negotiated a PeerConnection. Can be used to add DataChannels, or just keep a list of users. Called with the peer's unique ID.\u000a\u000a`.on('peerDisconnected', function(peer){})`\u000aTriggered when a peer has disconnected. Can be used to keep track of which users are currently conected. Called with the peer's unique ID.\u000a\u000a... Coming soon: DataChannels!\u000a\u000a###Methods\u000a\u000aThe PeerConnectionClient exposes many methods for interacting with peers connected to the WebSockets room.\u000a\u000a`addLocalStream(options)`\u000aCalls [GetUserMedia](https://developer.mozilla.org/en-US/docs/NavigatorUserMedia.getUserMedia) to capture the browser's webcam and microphone. Passes through all standard GetUserMedia options, so can be used to capture just audio or video if necessary. Will trigger a user prompt asking for permission to access webcam and microphone.\u000a\u000a`removeLocalStream()`\u000aRemoves the local stream from all PeerConnections and revoke microphone and video access.\u000a\u000a`disconnectConnection(id)`\u000aDisconnects a peer with the given ID, closing and removing the PeerConnection. If the connection had a MediaStream, it will also close and remove the stream.\u000a\u000a###License\u000a\u000aCopyright (c) 2015 Tom Lagier <tom@thomaslagier.me>\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in\u000aall copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\u000aIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\u000aFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\u000aAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\u000aLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\u000aOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\u000aTHE SOFTWARE.","readmeFilename":"README.md","gitHead":"3e013cceba0e080c4bc7807ea14ce0e2225df52d","_id":"socket-signaler-client@0.2.2","_shasum":"5b028b6eeaaece53095839f75dc26e7be335bdff","_from":".","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"tomlagier","email":"tom@thomaslagier.me"},"maintainers":[{"name":"tomlagier","email":"tom@thomaslagier.me"}],"dist":{"shasum":"5b028b6eeaaece53095839f75dc26e7be335bdff","tarball":"http://registry.npmjs.org/socket-signaler-client/-/socket-signaler-client-0.2.2.tgz"}}: socket-signaler-client
43 error If you need help, you may report this error at:
43 error     <http://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
